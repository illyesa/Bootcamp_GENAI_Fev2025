# -*- coding: utf-8 -*-
"""DailyChallengeW2D5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NEwUyBU9hgzx_62m9nLi7yIJtARSj2wT
"""

from google.colab import files
import pandas as pd

files.upload()

df = pd.read_excel("US Superstore data.xls", parse_dates=["Order Date", "Ship Date"])
df.info()
df.describe()

df.head()

print(df.isnull().sum())
df.drop_duplicates(inplace=True)
df.info()

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import folium
from IPython.display import display

df['Year'] = df['Order Date'].dt.year
sales_by_year = df.groupby('Year')['Sales'].sum().reset_index()

plt.figure(figsize=(12, 6))
plt.plot(sales_by_year['Year'], sales_by_year['Sales'], marker='o', linestyle='-')
plt.title('Sales Trends Over the Years')
plt.xlabel('Year')
plt.ylabel('Sales')
plt.grid(True)
plt.show()

# Sales trends over the years: les ventes ont diminué au début entre 2014 et 2015 puis les ventes ont eu une augmentation significative de 2015 à 2017

sales_by_state = df.groupby('State')['Sales'].sum().reset_index()
print(sales_by_state)

import plotly.express as px

sales_by_state = df.groupby('State')['Sales'].sum().reset_index()

# Coordonnées des États (valeurs approximatives)
state_coords = {
    "Alabama": [32.806671, -86.791130],
    "Arizona": [33.729759, -111.431221],
    "Arkansas": [34.746613, -92.288986],
    "California": [36.778259, -119.417931],
    "Colorado": [39.550051, -105.782067],
    "Connecticut": [41.603221, -73.087749],
    "Delaware": [38.910832, -75.527670],
    "District of Columbia": [38.9072, -77.0369],
    "Florida": [27.994402, -81.760254],
    "Georgia": [32.165622, -82.900075],
    "Idaho": [44.068202, -114.742043],
    "Illinois": [40.633125, -89.398528],
    "Indiana": [40.551217, -85.602364],
    "Iowa": [41.878003, -93.097702],
    "Kansas": [39.011902, -98.484246],
    "Kentucky": [37.839333, -84.270018],
    "Louisiana": [30.984298, -91.962333],
    "Maine": [45.253783, -69.445469],
    "Maryland": [39.045755, -76.641271],
    "Massachusetts": [42.407211, -71.382437],
    "Michigan": [44.314844, -85.602364],
    "Minnesota": [46.729553, -94.685900],
    "Mississippi": [32.354668, -89.398528],
    "Missouri": [37.964253, -91.831833],
    "Montana": [46.879682, -110.362566],
    "Nebraska": [41.492537, -99.901813],
    "Nevada": [38.802610, -116.419389],
    "New Hampshire": [43.193852, -71.572395],
    "New Jersey": [40.058324, -74.405661],
    "New Mexico": [34.972730, -105.032363],
    "New York": [43.299428, -74.217933],
    "North Carolina": [35.759573, -79.019300],
    "North Dakota": [47.551493, -101.002012],
    "Ohio": [40.417287, -82.907123],
    "Oklahoma": [35.007752, -97.092877],
    "Oregon": [43.804133, -120.554201],
    "Pennsylvania": [41.203322, -77.194525],
    "Rhode Island": [41.580095, -71.477429],
    "South Carolina": [33.836081, -81.163725],
    "South Dakota": [43.969515, -99.901813],
    "Tennessee": [35.517491, -86.580447],
    "Texas": [31.968599, -99.901813],
    "Utah": [39.320980, -111.093731],
    "Vermont": [44.558803, -72.577841],
    "Virginia": [37.431573, -78.656894],
    "Washington": [47.751074, -120.740139],
    "West Virginia": [38.597626, -80.454903],
    "Wisconsin": [43.784440, -88.787868],
    "Wyoming": [43.075968, -107.290284]
}
lat = [coords[0] for coords in state_coords.values()]
lon = [coords[1] for coords in state_coords.values()]

# Create a scatter plot with circles sized by sales
fig = px.scatter_geo(sales_by_state,
                     lat,
                     lon,
                     size='Sales',
                     color='Sales',
                     hover_name='State',
                     scope='usa',
                     title='Sales Distribution by State',
                     size_max=50,  # Adjust the maximum size of the circles
                     color_continuous_scale="Viridis")

fig.update_layout(geo=dict(landcolor='lightgrey'))

fig.show()

top_products = df.groupby('Product Name')['Sales'].sum().reset_index()

top_products = top_products.sort_values(by='Sales', ascending=False).head(10)

plt.figure(figsize=(12, 6))
sns.barplot(x='Sales', y='Product Name', data=top_products, hue='Product Name', palette='viridis', legend=False)
plt.title('Top 10 Products by Sales')
plt.xlabel('Sales')
plt.ylabel('Product Name')
plt.show()

# Top Products: le produit le plus vendu est Canon imageCLASS 2200 Advanced Copier

plt.figure(figsize=(12, 6))
sns.scatterplot(x='Discount', y='Profit', data=df, alpha=0.5)
plt.title('Profit vs. Discount')
plt.xlabel('Discount')
plt.ylabel('Profit')
plt.show()

# Profit vs. Discount: plus la remise est élevée plus les bénéfices sont faibles

# Matpltlib : permet de créer des graphiques idéal pour créer des visualisations détaillées et spécifiques
# Seaborn : offre une interface de niveau supérieur pour dessiner des graphiques statistiques attrayants avec un rendu esthétique par défaut
# L'utilisation combinée des deux bibliothèques est efficace pour une analyse approfondie